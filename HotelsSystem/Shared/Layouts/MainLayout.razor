@inherits LayoutComponentBase
@inject IJSRuntime jSRuntime;
@inject NavigationManager nav;
<MudRTLProvider RightToLeft="@(!System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName.Equals("en"))">

    <Sotsera.Blazor.Toaster.ToastContainer></Sotsera.Blazor.Toaster.ToastContainer>
    <MudThemeProvider IsDarkMode="!true" />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4">
                <ChangeLanguage></ChangeLanguage>
                <MudIconButton Class="me-2 ms-0" Href="@Routing.changepassword" DisableElevation Icon="@Icons.Filled.Password" Variant="Variant.Filled" Color="Color.Primary"></MudIconButton>
                <MudIconButton OnClick="Logout" DisableElevation Icon="@Icons.Filled.Logout" Variant="Variant.Filled" Color="Color.Primary"></MudIconButton>
            </div>
        

            @* <BreadCrumbItems></BreadCrumbItems> *@



            <article class="content px-2 py-2">
                <div class="container-fluid">
                    @Body
                </div>
            </article>
        </main>
    </div>

</MudRTLProvider>

@code {
    [Inject]
        public ISessionStorageService storage { get; set; } = default!;
        [Inject]
    public ISqlDataAccess DB { get; set; } = default!;

         protected override async Task OnInitializedAsync()
    {
        var session = await Protection.GetDecryptedSession(jSRuntime, DB,storage);
        await jSRuntime.InvokeVoidAsync("initializeInactivityTimer",DotNetObjectReference.Create(this));



        @* mgmt = new ClS_UserManagement(DB, session); *@

    }
    async Task Logout(){
    @* await jSRuntime.InvokeVoidAsync("blazorExtensions.delete_cookie",Util.CookieName); *@
    await storage.RemoveItemAsync(Util.CookieName);
    nav.NavigateTo(Routing.defaultpage);
}
[JSInvokable]
    public async Task LogoutJS()
    {
        // await jSRuntime.InvokeVoidAsync("blazorExtensions.delete_cookie", Util.CookieName);
        await storage.RemoveItemAsync(Util.CookieName);
        nav.NavigateTo(Routing.defaultpage);
    }
}